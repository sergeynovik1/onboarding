{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CountdownModule } from 'ngx-countdown';\nexport let TimerComponent = class TimerComponent {\n  constructor() {\n    this.timerExpired = new EventEmitter();\n  }\n  ngOnInit() {}\n  ngOnChanges(changes) {\n    if (changes['endTimestamp']) {\n      this.animationState = 'start';\n      this.animationState = 'end';\n      const leftTime = Math.floor((this.endTimestamp - Date.now()) / 1000);\n      this.countdownConfig = {\n        leftTime: leftTime > 0 ? leftTime : 0,\n        format: 'm:ss'\n      };\n    }\n  }\n  onAnimationEnd(progressRef) {\n    this.animationState = 'start';\n    this.timerExpired.emit();\n  }\n};\n__decorate([Input()], TimerComponent.prototype, \"endTimestamp\", void 0);\n__decorate([Output()], TimerComponent.prototype, \"timerExpired\", void 0);\nTimerComponent = __decorate([Component({\n  selector: 'app-timer[endTimestamp]',\n  standalone: true,\n  imports: [CommonModule, CountdownModule],\n  templateUrl: './timer.component.html',\n  styleUrls: ['./timer.component.scss'],\n  animations: [trigger('countdown', [state('start', style({\n    'stroke-dashoffset': '0px',\n    display: 'block'\n  })), state('end', style({\n    'stroke-dashoffset': 'calc(calc(50% - 1px) * 3.14 * 2)',\n    display: 'none'\n  })), transition('* => end', [animate('{{ duration }}')], {\n    params: {\n      duration: '1s'\n    }\n  })])]\n})], TimerComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}