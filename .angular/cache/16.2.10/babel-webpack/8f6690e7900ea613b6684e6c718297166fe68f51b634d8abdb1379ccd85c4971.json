{"ast":null,"code":"import { componentHandlers } from './const/component-handlers';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, NG_VALIDATORS, NG_VALUE_ACCESSOR, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { NgxGpAutocompleteModule } from '@angular-magic/ngx-gp-autocomplete';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular-magic/ngx-gp-autocomplete\";\nconst _c0 = function (a0, a1) {\n  return {\n    disabled: a0,\n    error: a1\n  };\n};\nfunction AdressInputComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"span\");\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 2)(4, \"input\", 3, 4);\n    i0.ɵɵlistener(\"onAddressChange\", function AdressInputComponent_div_0_Template_input_onAddressChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onAdressChange($event));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.inputForm)(\"ngClass\", i0.ɵɵpureFunction2(3, _c0, ctx_r0.inputForm.controls[\"adress\"].disabled, ctx_r0.inputForm.controls[\"adress\"].touched && ctx_r0.inputForm.controls[\"adress\"].dirty && !!ctx_r0.inputForm.invalid));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"placeholder\", ctx_r0.placeholder);\n  }\n}\nconst _c1 = [\"*\"];\nexport class AdressInputComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.placeholder = '';\n    this.subscription = new Subscription();\n    this.onChange = () => {};\n    this.onTouched = () => {};\n  }\n  ngOnInit() {\n    this.inputForm = this.fb.group({\n      adress: ['', [Validators.required]],\n      streetAddress: ['', [Validators.required]],\n      city: ['', [Validators.required]],\n      state: ['', [Validators.required]],\n      zipCode: ['', [Validators.required]],\n      type: ['PREVIOUS', [Validators.required]]\n    });\n  }\n  writeValue(val) {\n    const updVal = {\n      ...val,\n      adress: val.streetAddress && val.city && val.state && val.zipCode ? `${val.streetAddress}, ${val.city}, ${val.state}, ${val.zipCode}` : ''\n    };\n    val && this.inputForm && this.inputForm.patchValue(updVal, {\n      emitEvent: false\n    });\n  }\n  registerOnChange(fn) {\n    this.subscription.add(this.inputForm?.valueChanges.subscribe(fn));\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  setDisabledState(isDisabled) {\n    isDisabled ? this.inputForm?.disable({\n      emitEvent: false\n    }) : this.inputForm?.enable({\n      emitEvent: false\n    });\n  }\n  validate() {\n    return {\n      ...this.inputForm?.controls['adress'].errors,\n      ...this.inputForm?.controls['streetAddress'].errors,\n      ...this.inputForm?.controls['city'].errors,\n      ...this.inputForm?.controls['state'].errors,\n      ...this.inputForm?.controls['zipCode'].errors,\n      ...this.inputForm?.controls['type'].errors\n    };\n  }\n  onAdressChange(place) {\n    if (place.address_components) {\n      const parsedAdress = this.parseAddress(place.address_components);\n      const updVal = {\n        ...parsedAdress,\n        adress: `${parsedAdress.streetAddress}, ${parsedAdress.city}, ${parsedAdress.state}, ${parsedAdress.zipCode}`\n      };\n      this.inputForm?.patchValue(updVal, {\n        emitEvent: true\n      });\n    }\n  }\n  parseAddress(addressComponents) {\n    let address = {\n      city: '',\n      state: '',\n      streetAddress: '',\n      type: this.inputForm?.controls['type'].value,\n      zipCode: ''\n    };\n    for (const component of addressComponents) {\n      const componentType = component.types[0];\n      const handler = componentHandlers[componentType];\n      if (handler) {\n        address = handler(component, address);\n      }\n    }\n    return address;\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  static #_ = this.ɵfac = function AdressInputComponent_Factory(t) {\n    return new (t || AdressInputComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AdressInputComponent,\n    selectors: [[\"app-adress-input\"]],\n    inputs: {\n      placeholder: \"placeholder\"\n    },\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: AdressInputComponent,\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: AdressInputComponent,\n      multi: true\n    }]), i0.ɵɵStandaloneFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"wrapper\", 4, \"ngIf\"], [1, \"wrapper\"], [1, \"input-wrapper\", 3, \"formGroup\", \"ngClass\"], [\"type\", \"text\", \"ngx-gp-autocomplete\", \"\", \"formControlName\", \"adress\", 3, \"placeholder\", \"onAddressChange\"], [\"adress\", \"\"]],\n    template: function AdressInputComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, AdressInputComponent_div_0_Template, 6, 6, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.inputForm);\n      }\n    },\n    dependencies: [CommonModule, i2.NgClass, i2.NgIf, FormsModule, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, ReactiveFormsModule, i1.FormGroupDirective, i1.FormControlName, NgxGpAutocompleteModule, i3.NgxGpAutocompleteDirective],\n    styles: [\".wrapper[_ngcontent-%COMP%] {\\n  width: 100%;\\n  position: relative;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 8px;\\n}\\n.wrapper[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\\n  font-family: \\\"GeneralSansVariable\\\";\\n  font-size: 16px;\\n  font-style: normal;\\n  font-weight: 600;\\n  line-height: 20px;\\n  letter-spacing: 0.3px;\\n  color: #717575;\\n}\\n.wrapper[_ngcontent-%COMP%]   .input-wrapper[_ngcontent-%COMP%] {\\n  border-radius: 10px;\\n  border: 1px solid #ced1d1;\\n  overflow: hidden;\\n}\\n.wrapper[_ngcontent-%COMP%]   .input-wrapper[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\n  width: 100%;\\n  border: 0;\\n  outline: 0;\\n  padding: 14px 20px;\\n  font-family: \\\"GeneralSansVariable\\\";\\n  font-size: 16px;\\n  font-style: normal;\\n  font-weight: 400;\\n  line-height: 20px;\\n  letter-spacing: 0.2px;\\n  color: #131414;\\n}\\n.wrapper[_ngcontent-%COMP%]   .input-wrapper[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]::placeholder {\\n  color: #717575;\\n}\\n.wrapper[_ngcontent-%COMP%]   .input-wrapper[_ngcontent-%COMP%]:focus-within {\\n  box-shadow: 0px 0px 0px 3px #caedc9;\\n}\\n.wrapper[_ngcontent-%COMP%]   .input-wrapper.disabled[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\n  background-color: #f5f7f7;\\n  color: #ced1d1;\\n}\\n.wrapper[_ngcontent-%COMP%]   .input-wrapper.error[_ngcontent-%COMP%] {\\n  border: 1px solid #ed4b34;\\n}\\n.wrapper[_ngcontent-%COMP%]   .input-wrapper[_ngcontent-%COMP%]:not(.error):hover {\\n  border: 1px solid #717575;\\n}\"]\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}