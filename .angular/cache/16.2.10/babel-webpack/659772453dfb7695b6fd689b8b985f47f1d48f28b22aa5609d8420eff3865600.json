{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/services/cookies.service\";\nimport * as i3 from \"src/app/services/storage.service\";\nimport * as i4 from \"./state-managment/state-manager.service\";\nexport class AuthService {\n  constructor(http, cookiesService, storageService, stateManagerService) {\n    this.http = http;\n    this.cookiesService = cookiesService;\n    this.storageService = storageService;\n    this.stateManagerService = stateManagerService;\n    this.apiUrl = environment.apiUrl;\n  }\n  signIn(data) {\n    return this.http.post(this.apiUrl + '/auth/login/', data).pipe(tap(res => this.cookiesService.setCookie('tokens', JSON.stringify(res.data.tokens))), tap(res => this.cookiesService.setCookie('user', JSON.stringify(res.data.user))));\n  }\n  autoSignup(data) {\n    return this.http.post(this.apiUrl + '/auth/auto-signup', data).pipe(tap(res => this.storageService.set('tokens', JSON.stringify(res.data.tokens))), tap(res => {\n      const userId = res.data.userId;\n      const {\n        phoneNumber,\n        ...user\n      } = data;\n      this.stateManagerService.setData('user', {\n        ...user,\n        id: userId,\n        mobile: phoneNumber\n      });\n      this.stateManagerService.setData('smfaVerification', {\n        expire: Date.now() + 240 * 1000,\n        resendCount: 0,\n        verified: false\n      });\n    }));\n  }\n  manualSignup(data) {\n    return this.http.post(this.apiUrl + '/auth/manual-signup', data).pipe(tap(res => {\n      this.storageService.set('tokens', JSON.stringify(res.data.tokens));\n    }), tap(res => this.stateManagerService.setData('user', {\n      ...data,\n      id: res.data.userId\n    })), tap(res => this.stateManagerService.setData('smfaVerification', {\n      expire: null,\n      resendCount: null,\n      verified: true\n    })));\n  }\n  resendSmfa() {\n    return this.http.post(this.apiUrl + '/auth/send-smfa', {});\n  }\n  uploadIdentityDocument(uploadType, data) {\n    return this.http.patch(this.apiUrl + `/upload-identity-document?upload_type=${uploadType}`, data).pipe(tap(res => this.storageService.set('tokens', JSON.stringify(res.data.tokens))), tap(res => {\n      const {\n        user\n      } = this.stateManagerService.getData().value || {};\n      this.stateManagerService.setData('user', {\n        ...user,\n        isDocumentUpload: true\n      });\n    }));\n  }\n  updateUser(user) {\n    return this.http.put(this.apiUrl + '/auth/user', user);\n  }\n  updateUserAdresses(addresses) {\n    return this.http.put(this.apiUrl + '/rent-reporting-address', {\n      addresses\n    }).pipe(tap(res => this.storageService.set('tokens', JSON.stringify(res.data.tokens))), tap(res => {\n      const {\n        user\n      } = this.stateManagerService.getData().value || {};\n      this.stateManagerService.setData('user', {\n        ...user,\n        isDocumentUpload: true\n      });\n    }));\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookiesService), i0.ɵɵinject(i3.StorageService), i0.ɵɵinject(i4.StateManagerService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}