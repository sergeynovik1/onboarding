{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, forwardRef, Component, Input, Output, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nfunction NgToggleComponent_ng_container_4_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1.labelStyle);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.labelChecked, \" \");\n  }\n}\nfunction NgToggleComponent_ng_container_4_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r2.labelStyle);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.labelUnchecked, \" \");\n  }\n}\nfunction NgToggleComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NgToggleComponent_ng_container_4_span_1_Template, 2, 2, \"span\", 5);\n    i0.ɵɵtemplate(2, NgToggleComponent_ng_container_4_span_2_Template, 2, 2, \"span\", 6);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.toggled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.toggled);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"ng-toggle-focused\": a0\n  };\n};\nclass NgToggleConfig {}\nNgToggleConfig.ɵfac = function NgToggleConfig_Factory(t) {\n  return new (t || NgToggleConfig)();\n};\nNgToggleConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgToggleConfig,\n  factory: NgToggleConfig.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgToggleConfig, [{\n    type: Injectable\n  }], null, null);\n})();\nconst DEFAULT_COLOR_CHECKED = '#0099CC';\nconst DEFAULT_COLOR_UNCHECKED = '#e0e0e0';\nconst DEFAULT_LABEL_CHECKED = '';\nconst DEFAULT_LABEL_UNCHECKED = '';\nconst DEFAULT_SWITCH_COLOR = '#fff';\nconst DISABLED_COLOR = '#dbdbdb';\nconst DISABLED_BUTTON_COLOR = 'silver';\nlet nextUniqueId = 0;\nclass NgToggleComponent {\n  constructor(config, _elementRef) {\n    this.config = config;\n    this._elementRef = _elementRef;\n    this.value = this.config.value || true;\n    this.name = this.config.name || '';\n    this.disabled = this.config.disabled || false;\n    this.height = this.config.height || 25;\n    this.width = this.config.width || 45;\n    this.margin = this.config.margin || 2;\n    this.fontSize = this.config.fontSize || undefined;\n    this.speed = this.config.speed || 300;\n    this.color = this.config.color;\n    this.switchColor = this.config.switchColor;\n    this.labels = this.config.labels || true;\n    this.fontColor = this.config.fontColor || undefined;\n    this.values = this.config.values || {\n      checked: true,\n      unchecked: false\n    };\n    this.id = '';\n    this.ariaLabel = null;\n    this.ariaLabelledby = null;\n    this.cssColors = false;\n    this.change = new EventEmitter();\n    this.valueChange = new EventEmitter();\n    this.onChange = _ => {};\n    this.onTouch = () => {};\n    this._uniqueId = 'ng-toggle-' + ++nextUniqueId;\n    this.id = this.id || this._uniqueId;\n    this.ariaLabel = this.ariaLabel || this.name || this.id;\n  }\n  ngOnInit() {\n    this.setToogle();\n  }\n  onInput(value) {\n    this.value = value;\n    this.onTouch();\n    this.onChange(this.value);\n  }\n  writeValue(value) {\n    this.value = value;\n    this.setToogle();\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouch = fn;\n  }\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  setToogle() {\n    const value = this.value;\n    let index = Object.values(this.values).findIndex(el => el == value);\n    if (index > -1) this.toggled = Object.keys(this.values)[index] == 'checked' ? true : false;\n  }\n  ngOnChanges(changes) {\n    for (const propName in changes) {\n      const chng = changes[propName];\n      if (propName == 'value') this.writeValue(chng.currentValue);\n    }\n  }\n  get coreStyle() {\n    return {\n      width: px(this.width),\n      height: px(this.height),\n      transition: `all ${this.speed}ms`,\n      backgroundColor: this.cssColors ? null : this.disabled ? this.colorDisabled : this.colorCurrent,\n      borderRadius: px(Math.round(this.height / 2))\n    };\n  }\n  get buttonRadius() {\n    const radius = this.height - this.margin * 2;\n    return radius > 0 ? radius : 0;\n  }\n  get distance() {\n    return px(this.width - this.height + this.margin);\n  }\n  get buttonStyle() {\n    const transition = `all ${this.speed}ms`;\n    const margin = px(this.margin);\n    const transform = this.toggled ? translate(this.distance, margin) : translate(margin, margin);\n    let background = this.switchColor ? this.switchColorCurrent : null;\n    background = this.disabled ? this.switchColorDisabled : background;\n    return {\n      width: px(this.buttonRadius),\n      height: px(this.buttonRadius),\n      transition,\n      transform,\n      background\n    };\n  }\n  get labelStyle() {\n    return {\n      lineHeight: px(this.height),\n      fontSize: this.fontSize ? px(this.fontSize) : null,\n      color: this.fontColor ? this.fontColorCurrent : null\n    };\n  }\n  get colorChecked() {\n    let {\n      color\n    } = this;\n    if (!isObject(color)) {\n      return color || DEFAULT_COLOR_CHECKED;\n    }\n    return get(color, 'checked', DEFAULT_COLOR_CHECKED);\n  }\n  get colorUnchecked() {\n    return get(this.color, 'unchecked', DEFAULT_COLOR_UNCHECKED);\n  }\n  get colorDisabled() {\n    return get(this.color, 'disabled', DISABLED_COLOR);\n  }\n  get colorCurrent() {\n    return this.toggled ? this.colorChecked : this.colorUnchecked;\n  }\n  get labelChecked() {\n    return get(this.labels, 'checked', DEFAULT_LABEL_CHECKED);\n  }\n  get labelUnchecked() {\n    return get(this.labels, 'unchecked', DEFAULT_LABEL_UNCHECKED);\n  }\n  get switchColorChecked() {\n    return get(this.switchColor, 'checked', DEFAULT_SWITCH_COLOR);\n  }\n  get switchColorUnchecked() {\n    return get(this.switchColor, 'unchecked', DEFAULT_SWITCH_COLOR);\n  }\n  get switchColorDisabled() {\n    return get(this.switchColor, 'disabled', DISABLED_BUTTON_COLOR);\n  }\n  get switchColorCurrent() {\n    if (!isObject(this.switchColor)) {\n      return this.switchColor || DEFAULT_SWITCH_COLOR;\n    }\n    return this.toggled ? this.switchColorChecked : this.switchColorUnchecked;\n  }\n  get fontColorChecked() {\n    return get(this.fontColor, 'checked', DEFAULT_SWITCH_COLOR);\n  }\n  get fontColorUnchecked() {\n    return get(this.fontColor, 'unchecked', DEFAULT_SWITCH_COLOR);\n  }\n  get fontColorDisabled() {\n    return get(this.fontColor, 'disabled', DEFAULT_SWITCH_COLOR);\n  }\n  get fontColorCurrent() {\n    if (!isObject(this.fontColor)) {\n      return this.fontColor || DEFAULT_SWITCH_COLOR;\n    }\n    if (this.disabled) {\n      return this.fontColorDisabled;\n    }\n    return this.toggled ? this.fontColorChecked : this.fontColorUnchecked;\n  }\n  get label() {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n    return this.ariaLabel ? null : `${this._uniqueId}-label`;\n  }\n  toggle(event) {\n    const toggled = !this.toggled;\n    this.toggled = toggled;\n    this.value = this.getValue(toggled);\n    this.onTouch();\n    this.onChange(this.value);\n    this.valueChange.emit(this.value);\n  }\n  getValue(key) {\n    return key === true ? this.values['checked'] : this.values['unchecked'];\n  }\n  onFocus(event) {\n    if (!this.focused && event.relatedTarget) {\n      this.focused = true;\n    }\n  }\n  onFocusout(event) {\n    if (!this._elementRef.nativeElement.contains(event.relatedTarget)) {\n      this.focused = false;\n      this.onTouch();\n    }\n  }\n}\nNgToggleComponent.ɵfac = function NgToggleComponent_Factory(t) {\n  return new (t || NgToggleComponent)(i0.ɵɵdirectiveInject(NgToggleConfig), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nNgToggleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgToggleComponent,\n  selectors: [[\"ng-toggle\"]],\n  inputs: {\n    value: \"value\",\n    name: \"name\",\n    disabled: \"disabled\",\n    height: \"height\",\n    width: \"width\",\n    margin: \"margin\",\n    fontSize: \"fontSize\",\n    speed: \"speed\",\n    color: \"color\",\n    switchColor: \"switchColor\",\n    labels: \"labels\",\n    fontColor: \"fontColor\",\n    values: \"values\",\n    id: \"id\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"]\n  },\n  outputs: {\n    change: \"change\",\n    valueChange: \"valueChange\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NgToggleComponent),\n    multi: true\n  }]), i0.ɵɵNgOnChangesFeature],\n  decls: 5,\n  vars: 16,\n  consts: [[1, \"ng-toggle-switch\", 3, \"for\"], [\"type\", \"checkbox\", \"role\", \"checkbox\", 1, \"ng-toggle-switch-input\", 3, \"checked\", \"disabled\", \"change\", \"focusin\", \"focusout\"], [1, \"ng-toggle-switch-core\", 3, \"ngClass\", \"ngStyle\"], [1, \"ng-toggle-switch-button\", 3, \"ngStyle\"], [4, \"ngIf\"], [\"class\", \"ng-toggle-switch-label ng-toggle-left\", 3, \"ngStyle\", 4, \"ngIf\"], [\"class\", \"ng-toggle-switch-label ng-toggle-right\", 3, \"ngStyle\", 4, \"ngIf\"], [1, \"ng-toggle-switch-label\", \"ng-toggle-left\", 3, \"ngStyle\"], [1, \"ng-toggle-switch-label\", \"ng-toggle-right\", 3, \"ngStyle\"]],\n  template: function NgToggleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"label\", 0)(1, \"input\", 1);\n      i0.ɵɵlistener(\"change\", function NgToggleComponent_Template_input_change_1_listener($event) {\n        return ctx.toggle($event);\n      })(\"focusin\", function NgToggleComponent_Template_input_focusin_1_listener($event) {\n        return ctx.onFocus($event);\n      })(\"focusout\", function NgToggleComponent_Template_input_focusout_1_listener($event) {\n        return ctx.onFocusout($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵelement(3, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, NgToggleComponent_ng_container_4_Template, 3, 2, \"ng-container\", 4);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"for\", ctx.id);\n      i0.ɵɵattribute(\"id\", ctx.label);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"checked\", ctx.value)(\"disabled\", ctx.disabled);\n      i0.ɵɵattribute(\"id\", ctx.id)(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.label)(\"aria-describedby\", ctx.ariaDescribedby)(\"aria-checked\", ctx.toggled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(14, _c0, ctx.focused))(\"ngStyle\", ctx.coreStyle);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngStyle\", ctx.buttonStyle);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.labels);\n    }\n  },\n  dependencies: [i2.NgClass, i2.NgIf, i2.NgStyle],\n  styles: [\"label[_ngcontent-%COMP%]{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}.ng-toggle-switch[_ngcontent-%COMP%]{display:inline-block;position:relative;vertical-align:middle;-webkit-user-select:none;user-select:none;font-size:10px;cursor:pointer}.ng-toggle-switch[_ngcontent-%COMP%]   .ng-toggle-switch-input[_ngcontent-%COMP%]{opacity:0;position:absolute;width:1px;height:1px}.ng-toggle-switch[_ngcontent-%COMP%]   .ng-toggle-switch-label[_ngcontent-%COMP%]{position:absolute;top:0;font-weight:600;color:#fff;z-index:1}.ng-toggle-switch[_ngcontent-%COMP%]   .ng-toggle-switch-label.ng-toggle-left[_ngcontent-%COMP%]{left:10px}.ng-toggle-switch[_ngcontent-%COMP%]   .ng-toggle-switch-label.ng-toggle-right[_ngcontent-%COMP%]{right:10px}.ng-toggle-switch[_ngcontent-%COMP%]   .ng-toggle-switch-core[_ngcontent-%COMP%]{display:block;position:relative;box-sizing:border-box;outline:0;margin:0;transition:border-color .3s,background-color .3s;-webkit-user-select:none;user-select:none}.ng-toggle-switch[_ngcontent-%COMP%]   .ng-toggle-switch-core[_ngcontent-%COMP%]   .ng-toggle-switch-button[_ngcontent-%COMP%]{display:block;position:absolute;overflow:hidden;top:0;left:0;border-radius:100%;background-color:#fff;z-index:2}.ng-toggle-switch.disabled[_ngcontent-%COMP%]{pointer-events:none;opacity:.6}.ng-toggle-focused[_ngcontent-%COMP%]{box-shadow:0 0 4px 3px #999}\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgToggleComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ng-toggle',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => NgToggleComponent),\n        multi: true\n      }],\n      template: \"<label class=\\\"ng-toggle-switch\\\" [for]=\\\"id\\\" [attr.id]=\\\"label\\\">\\r\\n  <input\\r\\n    type=\\\"checkbox\\\"\\r\\n    class=\\\"ng-toggle-switch-input\\\"\\r\\n    [checked]=\\\"value\\\"\\r\\n    [disabled]=\\\"disabled\\\"\\r\\n    (change)=\\\"toggle($event)\\\"\\r\\n    (focusin)=\\\"onFocus($event)\\\"\\r\\n    (focusout)=\\\"onFocusout($event)\\\"\\r\\n    [attr.id]=\\\"id\\\"\\r\\n    [attr.name]=\\\"name\\\"\\r\\n    [attr.aria-label]=\\\"ariaLabel\\\"\\r\\n    [attr.aria-labelledby]=\\\"label\\\"\\r\\n    [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\r\\n    [attr.aria-checked]=\\\"toggled\\\"\\r\\n    role=\\\"checkbox\\\"\\r\\n  >\\r\\n  <div\\r\\n    class=\\\"ng-toggle-switch-core\\\"\\r\\n    [ngClass]=\\\"{'ng-toggle-focused': focused}\\\"\\r\\n    [ngStyle]=\\\"coreStyle\\\"\\r\\n  >\\r\\n    <div\\r\\n      class=\\\"ng-toggle-switch-button\\\"\\r\\n      [ngStyle]=\\\"buttonStyle\\\">\\r\\n    </div>\\r\\n  </div>\\r\\n  <ng-container *ngIf=\\\"labels\\\">\\r\\n    <span\\r\\n      class=\\\"ng-toggle-switch-label ng-toggle-left\\\"\\r\\n      [ngStyle]=\\\"labelStyle\\\"\\r\\n      *ngIf=\\\"toggled\\\"\\r\\n    >\\r\\n      {{labelChecked}}\\r\\n    </span>\\r\\n    <span\\r\\n      class=\\\"ng-toggle-switch-label ng-toggle-right\\\"\\r\\n      [ngStyle]=\\\"labelStyle\\\"\\r\\n      *ngIf=\\\"!toggled\\\"\\r\\n    >\\r\\n      {{labelUnchecked}}\\r\\n    </span>\\r\\n  </ng-container>\\r\\n</label>\",\n      styles: [\"label{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}.ng-toggle-switch{display:inline-block;position:relative;vertical-align:middle;-webkit-user-select:none;user-select:none;font-size:10px;cursor:pointer}.ng-toggle-switch .ng-toggle-switch-input{opacity:0;position:absolute;width:1px;height:1px}.ng-toggle-switch .ng-toggle-switch-label{position:absolute;top:0;font-weight:600;color:#fff;z-index:1}.ng-toggle-switch .ng-toggle-switch-label.ng-toggle-left{left:10px}.ng-toggle-switch .ng-toggle-switch-label.ng-toggle-right{right:10px}.ng-toggle-switch .ng-toggle-switch-core{display:block;position:relative;box-sizing:border-box;outline:0;margin:0;transition:border-color .3s,background-color .3s;-webkit-user-select:none;user-select:none}.ng-toggle-switch .ng-toggle-switch-core .ng-toggle-switch-button{display:block;position:absolute;overflow:hidden;top:0;left:0;border-radius:100%;background-color:#fff;z-index:2}.ng-toggle-switch.disabled{pointer-events:none;opacity:.6}.ng-toggle-focused{box-shadow:0 0 4px 3px #999}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: NgToggleConfig\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    value: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    margin: [{\n      type: Input\n    }],\n    fontSize: [{\n      type: Input\n    }],\n    speed: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    switchColor: [{\n      type: Input\n    }],\n    labels: [{\n      type: Input\n    }],\n    fontColor: [{\n      type: Input\n    }],\n    values: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    change: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }]\n  });\n})();\nconst isObject = value => {\n  return typeof value === 'object';\n};\nconst has = (object, key) => {\n  return isObject(object) && object.hasOwnProperty(key);\n};\nconst get = (object, key, defaultValue) => {\n  return has(object, key) ? object[key] : defaultValue;\n};\nconst px = value => {\n  return `${value}px`;\n};\nconst translate = (x, y) => {\n  return `translate(${x}, ${y})`;\n};\nclass NgToggleModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: NgToggleModule,\n      providers: [{\n        provide: NgToggleConfig,\n        useValue: config\n      }]\n    };\n  }\n}\nNgToggleModule.ɵfac = function NgToggleModule_Factory(t) {\n  return new (t || NgToggleModule)();\n};\nNgToggleModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgToggleModule\n});\nNgToggleModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [NgToggleConfig],\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgToggleModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgToggleComponent],\n      imports: [CommonModule],\n      exports: [NgToggleComponent],\n      providers: [NgToggleConfig]\n    }]\n  }], null, null);\n})();\n\n/*\r\n * Public API Surface of ng-toogle\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgToggleComponent, NgToggleConfig, NgToggleModule, get, has, isObject, px, translate };\n//# sourceMappingURL=ng-toggle-button.mjs.map\n//# sourceMappingURL=ng-toggle-button.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}