{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/snackbar.service\";\nimport * as i2 from \"@angular/router\";\nexport class ErrorHandlerInterceptor {\n  constructor(snackbarService, router) {\n    this.snackbarService = snackbarService;\n    this.router = router;\n  }\n  intercept(req, next) {\n    return next.handle(req).pipe(tap(response => {\n      if (response instanceof HttpResponse && !response.body?.api_success) {\n        const message = (response.body?.message || response.body?.error) ?? 'Something went wrong';\n        this.snackbarService.showError(message);\n      }\n    }), catchError(err => {\n      this.snackbarService.showError((err.error.data.message || err.error) ?? 'Something went wrong');\n      this.router.navigate(['/register/failed']);\n      throw err;\n    }));\n  }\n  static #_ = this.ɵfac = function ErrorHandlerInterceptor_Factory(t) {\n    return new (t || ErrorHandlerInterceptor)(i0.ɵɵinject(i1.SnackBarService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorHandlerInterceptor,\n    factory: ErrorHandlerInterceptor.ɵfac\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}