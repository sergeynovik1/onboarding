{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class DragAndDropDirective {\n  constructor(el) {\n    this.el = el;\n    this.filesChange = new EventEmitter();\n  }\n  onDragOver(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.el.nativeElement.classList.add('dragenter');\n  }\n  onDragLeave(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const dropzone = this.el.nativeElement;\n    const relatedTarget = event['relatedTarget'] || event['toElement'];\n    if (!dropzone.contains(relatedTarget)) {\n      dropzone.classList.remove('dragenter');\n    }\n  }\n  onDrop(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.el.nativeElement.classList.remove('dragenter');\n    let files = Object.values(event.dataTransfer.files);\n    this.filesChange.emit(files);\n  }\n  static #_ = this.ɵfac = function DragAndDropDirective_Factory(t) {\n    return new (t || DragAndDropDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: DragAndDropDirective,\n    selectors: [[\"\", \"drag-n-drop\", \"\"]],\n    hostBindings: function DragAndDropDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"dragover\", function DragAndDropDirective_dragover_HostBindingHandler($event) {\n          return ctx.onDragOver($event);\n        })(\"dragleave\", function DragAndDropDirective_dragleave_HostBindingHandler($event) {\n          return ctx.onDragLeave($event);\n        })(\"drop\", function DragAndDropDirective_drop_HostBindingHandler($event) {\n          return ctx.onDrop($event);\n        });\n      }\n    },\n    outputs: {\n      filesChange: \"filesChange\"\n    },\n    standalone: true\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}