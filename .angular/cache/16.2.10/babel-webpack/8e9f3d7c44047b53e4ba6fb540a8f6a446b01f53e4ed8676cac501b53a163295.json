{"ast":null,"code":"import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter } from '@angular/core';\nimport { CountdownModule } from 'ngx-countdown';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"ngx-countdown\";\nconst _c0 = [\"endTimestamp\", \"\"];\nfunction TimerComponent_countdown_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"countdown\", 5);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"config\", ctx_r0.countdownConfig);\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    duration: a0\n  };\n};\nconst _c2 = function (a0, a1) {\n  return {\n    value: a0,\n    params: a1\n  };\n};\nexport class TimerComponent {\n  constructor() {\n    this.timerExpired = new EventEmitter();\n  }\n  ngOnInit() {}\n  ngOnChanges(changes) {\n    if (changes['endTimestamp']) {\n      this.animationState = 'start';\n      this.animationState = 'end';\n      const leftTime = Math.floor((this.endTimestamp - Date.now()) / 1000);\n      this.countdownConfig = {\n        leftTime: leftTime > 0 ? leftTime : 0,\n        format: 'm:ss'\n      };\n    }\n  }\n  onAnimationEnd(progressRef) {\n    this.animationState = 'start';\n    this.timerExpired.emit();\n  }\n  static #_ = this.ɵfac = function TimerComponent_Factory(t) {\n    return new (t || TimerComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TimerComponent,\n    selectors: [[\"app-timer\", \"endTimestamp\", \"\"]],\n    inputs: {\n      endTimestamp: \"endTimestamp\"\n    },\n    outputs: {\n      timerExpired: \"timerExpired\"\n    },\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n    attrs: _c0,\n    decls: 6,\n    vars: 7,\n    consts: [[1, \"wrapper\"], [3, \"config\", 4, \"ngIf\"], [\"id\", \"back\", \"cx\", \"50%\", \"cy\", \"50%\"], [\"id\", \"progress\", \"cx\", \"50%\", \"cy\", \"50%\"], [\"progress\", \"\"], [3, \"config\"]],\n    template: function TimerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r2 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, TimerComponent_countdown_1_Template, 1, 1, \"countdown\", 1);\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(2, \"svg\");\n        i0.ɵɵelement(3, \"circle\", 2);\n        i0.ɵɵelementStart(4, \"circle\", 3, 4);\n        i0.ɵɵlistener(\"@countdown.done\", function TimerComponent_Template__svg_circle_animation_countdown_done_4_listener() {\n          i0.ɵɵrestoreView(_r2);\n          const _r1 = i0.ɵɵreference(5);\n          return i0.ɵɵresetView(ctx.onAnimationEnd(_r1));\n        });\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.countdownConfig);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"@countdown\", i0.ɵɵpureFunction2(4, _c2, ctx.animationState, i0.ɵɵpureFunction1(2, _c1, (ctx.countdownConfig == null ? null : ctx.countdownConfig.leftTime) + \"s\")));\n      }\n    },\n    dependencies: [CommonModule, i1.NgIf, CountdownModule, i2.CountdownComponent],\n    styles: [\"[_nghost-%COMP%] {\\n  display: block;\\n}\\n\\n.wrapper[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 100%;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  position: relative;\\n}\\n.wrapper[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 100%;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  transform: rotateY(-180deg) rotateZ(-90deg);\\n  position: absolute;\\n}\\n.wrapper[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]   #back[_ngcontent-%COMP%] {\\n  r: calc(50% - 1px);\\n  stroke-dashoffset: 0px;\\n  stroke-linecap: round;\\n  stroke-width: 1px;\\n  stroke: #ced1d1;\\n  fill: none;\\n}\\n.wrapper[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]   #progress[_ngcontent-%COMP%] {\\n  r: calc(50% - 1px);\\n  stroke-dasharray: calc((50% - 1px) * 3.14 * 2);\\n  stroke-linecap: round;\\n  stroke-width: 2px;\\n  stroke: #8ed499;\\n  fill: none;\\n}\\n.wrapper[_ngcontent-%COMP%]   countdown[_ngcontent-%COMP%] {\\n  font-family: \\\"GeneralSansVariable\\\";\\n  font-size: 48px;\\n  color: #0c494f;\\n  text-align: center;\\n  font-size: 48px;\\n  font-weight: 600;\\n  line-height: 56px;\\n}\"],\n    data: {\n      animation: [trigger('countdown', [state('start', style({\n        'stroke-dashoffset': '0px',\n        display: 'block'\n      })), state('end', style({\n        'stroke-dashoffset': 'calc(calc(50% - 1px) * 3.14 * 2)',\n        display: 'none'\n      })), transition('* => end', [animate('{{ duration }}')], {\n        params: {\n          duration: '1s'\n        }\n      })])]\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}